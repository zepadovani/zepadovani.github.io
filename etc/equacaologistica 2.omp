; OM File Header - Saved 2012/12/19 9:54:20
; (6.050102 :patc (om-make-point 10 10) (om-make-point 321 0) (om-make-point 894 715) "" 183 0 "2012/12/18 22:49:42" "2012/12/19 9:54:20")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "funcaologistica" (quote ((om-load-boxcomment "comment" (om-make-point 100 60) (quote "gráfico de saída ") nil (om-make-point 745 186) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 5))) (om-make-point 512 147) (om-make-point 222 152) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0 2100.0 2200.0 2300.0 2400.0 2500.0 2600.0 2700.0 2800.0 2900.0)) (quote (0.95 0.1805 0.5621 0.93535 0.22979 0.67256 0.83685 0.51882 0.94865 0.1851 0.57318 0.92965 0.24852 0.70967 0.78294 0.64579 0.86923 0.43194 0.9324 0.23951 0.69216 0.80968 0.58556 0.92218 0.2727 0.75368 0.70546 0.78958 0.63134 0.88445)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 139 38) (quote "equação logística") nil (om-make-point 144 153) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 237 49) (quote "funcao de quantificacao (ver documentacao e argumentos)") nil (om-make-point 308 446) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 291 32) (quote "tmax (i.e.: numero maximo de iteracoes)") nil (om-make-point 178 104) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 180 27) (quote "k") nil (om-make-point 158 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 180 27) (quote "x[t] (i.e.: x inicial)") nil (om-make-point 113 34) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 213 85) (quote "mapeamento dos valores entre 0 e 1.0 para uma escala de duracoes em milissegundos") nil (om-make-point 234 304) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 196 269) (om-make-point 42 30) 1500 "1500" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 178 239) (om-make-point 35 30) 500 "500" nil) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 282 555) (om-make-point 185 95) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) (1 (1 (3.0 4)) (1 (1.0 7)) (1 (1.0 4)))) ((3 4) ((1 (4.0 1.0 3)) (1 (3.0 -4 -1.0)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (571)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (800)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 635 284) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 90 30) (quote "durmax (ms)") nil (om-make-point 234 264) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 90 30) (quote "durmin (ms)") nil (om-make-point 215 234) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 1.0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 1.0))) (om-make-point 157 321) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "DURS" (list 100)) (om-load-inputfun (quote input-funbox) "tempo" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8))) (om-make-point 236 424) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 145 108) (om-make-point 28 30) 30 "30" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 125 68) (om-make-point 32 30) 3.8 "3.8" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 82 36) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.050102 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$;;;x[t+1]= k * x * (1 - x)$$;; lambda sifnifica que será definida uma função a ser utilizada no OM $;; (como se fosse uma função daquelas que encontramos nos menus$;; normais)$;; ela recebe dois argumentos: o 1º é uma lista de argumentos $;; para a função e a segunda é uma lista com a própria função,$;; construída com um loop$;; loop: cria uma iteração até tmax$;; \"with\" significa que cria-se uma variável \"thisx\" com valor inicial$;; igual a argx (o x[t=0], i.e., i \"x\" inicial)$;; do (setq ... é a função que atualiza o valor de thisx (o valor de$;; x naquela iteração) a partir da equação logística$;; collect é utilizado para colecionar o valor de thisx numa lista final$$(lambda (argx argk tmax) $  (loop$   for i below tmax$   with thisx = argx$   do (setq thisx (* argk thisx (- 1 thisx)))$   collect thisx)$  )$     $") (quote ((om-load-inputfun (quote input-funbox) "" "ARGX" 2) (om-load-inputfun (quote input-funbox) "" "ARGK" nil) (om-load-inputfun (quote input-funbox) "" "TMAX" nil))) (om-make-point 77 137) nil nil nil nil))) (quote ((18 0 1 2 nil 0) (14 0 10 1 nil 0) (18 0 13 0 nil 0) (9 0 13 1 nil 0) (8 0 13 2 nil 0) (13 0 14 0 nil 0) (17 0 18 0 nil 0) (16 0 18 1 nil 0) (15 0 18 2 nil 0))) nil 6.050102))