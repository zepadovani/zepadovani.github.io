; OM File Header - Saved 2013/01/30 17:26:17
; (6.050102 :patc (om-make-point 118 60) (om-make-point 395 28) (om-make-point 669 484) "" 183 0 "2013/01/30 10:43:21" "2013/01/30 17:26:17")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "lindenmeyer-patch" (quote ((om-load-boxcomment "comment" (om-make-point 327 48) (quote "tutoriais de composição IV - 2012.2 - aula 5") nil (om-make-point 93 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 462 84) (quote "com flat, cria-se uma unica lista com todos os dados emparelhados (mas perde-se a informacao de quais numeros correspondem a determinada etapa)") nil (om-make-point 181 351) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "se 0 -> 0 1$se 1 -> 0") nil (om-make-point 458 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 460 68) (quote "se avaliar o patch aqui, obtem-se uma lista de listas...$cada sub-lista corresponde a uma etapa/estado do processo") nil (om-make-point 163 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 106 31) (quote "estado inicial") nil (om-make-point 97 47) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 215 57) (quote "numero de estados a gerar$") nil (om-make-point 279 131) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 134 350) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 113 172) nil nil nil (list (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 333 250) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 165 314) nil nil nil nil 3) (om-load-boxcall (quote abstraction) "lindenmeyer-regras" (om-load-patch-abs1 "lindenmeyer-regras" (quote ((om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 41 147) nil nil nil (list (om-load-boxcomment "comment" (om-make-point 302 55) (quote "caso queira criar outras regras, basta expandir a série de omifs seguindo o modelo") nil (om-make-point 306 102) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 336 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM= 2" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 309 203) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 379 206) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 419 202) (om-make-point 31 30) (list 0) "(0)" nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 281 431) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 208 205) (om-make-point 42 30) (list 0 1) "(0 1)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 168 209) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 98 206) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 125 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 197 78) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 136 33) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 336 510) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 236 510) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (4 0 1 1 nil 0) (10 0 2 0 nil 0) (3 0 2 1 nil 0) (9 0 5 0 nil 0) (10 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0) (1 0 9 2 nil 0) (11 0 10 0 nil 0) (5 1 12 0 nil 0) (5 0 13 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 64 217) nil nil nil nil 1) (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 12 384) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((4 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0))) 6.050102 nil "" (om-make-point 194 256) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 156 159) nil nil "l" "lindenmeyer-regras") (om-load-boxin "input" 1 (om-make-point 224 44) "" nil nil nil) (om-load-boxcall (quote genfun) "accum" (quote accumulator) (quote ((om-load-inputfun (quote input-funbox) "items to collect" "DATA" nil) (om-load-inputfun (quote input-funbox) "initial value" "INIT" nil) (om-load-inputfun (quote input-funbox) "accumulation function" "FUN" nil))) (om-make-point 126 239) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 320 110) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 310 140) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 65 40) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 309 471) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 209 471) nil nil nil 0)) (quote ((6 0 0 1 nil 0) (4 0 1 0 nil 0) (7 0 4 0 ((om-make-point 85 97) (om-make-point 44 164) (om-make-point 68 200) (om-make-point 137 239)) 0) (7 0 4 1 nil 0) (2 0 4 2 nil 0) (3 0 6 0 nil 0) (5 0 6 1 nil 0) (1 1 8 0 nil 0) (1 0 9 0 ((om-make-point 174 371) (om-make-point 174 421) (om-make-point 179 442) (om-make-point 241 471)) 0))) 1 nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 240 133) (om-make-point 28 30) 12 "12" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 101 78) (om-make-point 53 30) (list 1 0 1) "(1 0 1)" nil))) (quote ((7 0 6 0 nil 0) (9 0 7 0 nil 0) (8 0 7 1 nil 0))) nil 6.050102))